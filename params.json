{"name":"Giploy","tagline":"giploy is another script to deploy git master branch on multiple remote server.","body":"# giploy\r\n\r\ngiploy is another script to deploy git master branch on remote server. The particularity of giploy is that it doesn't create tag or symbolic link on remote server like capistrano, so you don't have to extract or copy users uploaded files from your directory after deployement. It pulls source from develop branch on a git repository and create a release branch to bump the version and merge on master before pushing on remote server. It works like [git-flow](http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/) works. \r\n\r\nIt's very usefull if you don't want to hook a push on master to deploy automatically but you want to manage your deployment schedulation.\r\n\r\n```\r\nDeployment server ------- www1\r\n                     \\--- www2\r\n```\r\n\r\n## Install \r\nDownload the giploy.sh and giploy.conf\r\n```\r\n$ vim giploy.conf\r\n$ chmod +x giploy.sh\r\n$ ./giploy.sh -h\r\n```\r\n\r\n## Configuration\r\n|key|sample value|description|\r\n|---|------------|-----------|\r\n|REPOSITORY|/home/\\<user\\>/preprod|The absolute path of your deployement git directory on your deployement server|\r\n|REMOTES|\"production,production2\"|Remote name list|\r\n|LOG_FILENAME|debug.log|The log filename|\r\n|SCRIPT_ON_RELEASE_BRANCH|custom.sh|If you want to run a custom script when giploy is on the release branch|\r\n\r\n## Add remote server \r\n\r\n### Automatically\r\nJuste download init-remote.sh next to giploy.sh and run\r\n```\r\n$ ./init-remote.sh -u vagrant -H 127.0.0.1 -p 2201 -r /home/vagrant/website production3\r\n```\r\n\r\n### Manually\r\n#### on remote server\r\n\r\nCreate empty git repository\r\n```\r\n$ mkdir -p /home/<user>/<project>.git\r\n$ cd /home/<user>/<project>.git\r\n$ git init --bare\r\n```\r\n\r\nCreate the hook that checkout pushed branch\r\n```\r\n$ vim hooks/post-receive\r\n#!/bin/sh \r\nGIT_WORK_TREE=/var/www/<project> git checkout -f\r\n```\r\n\r\nMake sure that your hook have corrects rights\r\n```\r\n$ chmod +x hooks/post-receive\r\n```\r\n\r\n#### on deployment/dev server\r\n\r\nIn your repository path, you have to add a remote server to use this script.\r\n```\r\n$ cd <repository-path>\r\n$ git remote add production ssh://<website.com>/home/<user>/<project>.git\r\n```\r\n\r\nDo an initial push, that setup the master branch\r\n```\r\n$ git push production +master:refs/heads/master\r\n```\r\n\r\nSo, you're ready to use this remote server and add it to giploy.conf\r\n\r\nEnjoy\r\n\r\n## Share SSH Key with remote server\r\n\r\nIf you have many remote server, you probably want to share ssh key to avoid password typing for each server.\r\nGo to your deployement/dev server and type this command ```ssh-keygen```if you don't have a ```~/.ssh/id_rsa``` file\r\nNow, it's time to copy your public key to your remote server : \r\n```\r\n$ ssh-copy-id <user>@<website.com>\r\n```\r\nTo validate installation, try to login to your remote server and if it doesn't ask for password, ssh key was correctly installed.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}